# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import agent_pb2 as agent__pb2

GRPC_GENERATED_VERSION = '1.64.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class llmStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stream = channel.unary_stream(
                '/llm/stream',
                request_serializer=agent__pb2.TextRequest.SerializeToString,
                response_deserializer=agent__pb2.TextResponse.FromString,
                _registered_method=True)
        self.get_num_tokens_from_messages = channel.unary_unary(
                '/llm/get_num_tokens_from_messages',
                request_serializer=agent__pb2.MessageRequest.SerializeToString,
                response_deserializer=agent__pb2.TokenNum.FromString,
                _registered_method=True)
        self.get_tokens_from_messages = channel.unary_unary(
                '/llm/get_tokens_from_messages',
                request_serializer=agent__pb2.MessageRequest.SerializeToString,
                response_deserializer=agent__pb2.Tokens.FromString,
                _registered_method=True)


class llmServicer(object):
    """Missing associated documentation comment in .proto file."""

    def stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_num_tokens_from_messages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_tokens_from_messages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_llmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stream': grpc.unary_stream_rpc_method_handler(
                    servicer.stream,
                    request_deserializer=agent__pb2.TextRequest.FromString,
                    response_serializer=agent__pb2.TextResponse.SerializeToString,
            ),
            'get_num_tokens_from_messages': grpc.unary_unary_rpc_method_handler(
                    servicer.get_num_tokens_from_messages,
                    request_deserializer=agent__pb2.MessageRequest.FromString,
                    response_serializer=agent__pb2.TokenNum.SerializeToString,
            ),
            'get_tokens_from_messages': grpc.unary_unary_rpc_method_handler(
                    servicer.get_tokens_from_messages,
                    request_deserializer=agent__pb2.MessageRequest.FromString,
                    response_serializer=agent__pb2.Tokens.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class llm(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm/stream',
            agent__pb2.TextRequest.SerializeToString,
            agent__pb2.TextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_num_tokens_from_messages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm/get_num_tokens_from_messages',
            agent__pb2.MessageRequest.SerializeToString,
            agent__pb2.TokenNum.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_tokens_from_messages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm/get_tokens_from_messages',
            agent__pb2.MessageRequest.SerializeToString,
            agent__pb2.Tokens.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class embedingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.embed_documents = channel.unary_unary(
                '/embeding/embed_documents',
                request_serializer=agent__pb2.Docs.SerializeToString,
                response_deserializer=agent__pb2.FloatListList.FromString,
                _registered_method=True)
        self.embed_query = channel.unary_unary(
                '/embeding/embed_query',
                request_serializer=agent__pb2.Query.SerializeToString,
                response_deserializer=agent__pb2.FloatList.FromString,
                _registered_method=True)


class embedingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def embed_documents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def embed_query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_embedingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'embed_documents': grpc.unary_unary_rpc_method_handler(
                    servicer.embed_documents,
                    request_deserializer=agent__pb2.Docs.FromString,
                    response_serializer=agent__pb2.FloatListList.SerializeToString,
            ),
            'embed_query': grpc.unary_unary_rpc_method_handler(
                    servicer.embed_query,
                    request_deserializer=agent__pb2.Query.FromString,
                    response_serializer=agent__pb2.FloatList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'embeding', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('embeding', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class embeding(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def embed_documents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/embeding/embed_documents',
            agent__pb2.Docs.SerializeToString,
            agent__pb2.FloatListList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def embed_query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/embeding/embed_query',
            agent__pb2.Query.SerializeToString,
            agent__pb2.FloatList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class compressed_promptStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.compress = channel.unary_unary(
                '/compressed_prompt/compress',
                request_serializer=agent__pb2.Compress.SerializeToString,
                response_deserializer=agent__pb2.Result.FromString,
                _registered_method=True)


class compressed_promptServicer(object):
    """Missing associated documentation comment in .proto file."""

    def compress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_compressed_promptServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'compress': grpc.unary_unary_rpc_method_handler(
                    servicer.compress,
                    request_deserializer=agent__pb2.Compress.FromString,
                    response_serializer=agent__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'compressed_prompt', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('compressed_prompt', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class compressed_prompt(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def compress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/compressed_prompt/compress',
            agent__pb2.Compress.SerializeToString,
            agent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
